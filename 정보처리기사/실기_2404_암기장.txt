실기_2404_암기장

ㅁ 소프트웨어 아키텍처 4+1 뷰
 - 논리뷰 : 시스템의 기능적 요구사항
 - 구현뷰 : 모듈의 구성과 개발자의 관점을 반영
 - 프로세스 뷰 : 프로그램 실행 시의 시스템을 표현
 - 배치 뷰 : 시스템의 물리적 배치
 - 유스케이스 뷰(사용자) : 아키텍처 설계 및 검증을 주도

ㅁ 프레임워크 : 개발에 필요한 구성요소와 아키텍처를 제공하는 반제품 형태의 소프트웨어
 - 프레임워크 특징 : 모듈화, 재사용성, 확장성, 제어의 역흐름
 - 정자정부 프레임워크, 스트럿츠, 스프링
 - 아이바티스, 마이바티스, 하이버네이크

ㅁ 시큐어 코팅
 - OWASP : 오픈소스 웹 애플리케이션 보안 프로젝트
 - 시큐어 코딩 가이드
 . 입력 데이터 검증 및 표현 : SQL Injection, XSS, 자원삽입 등
 . 보안기능 : 부적절한 인가, 취약한 암호화 알고리즘, 패스워트 평문저장 등
 . 시간 및 상태 : 경쟁조건, 종료되지 않은 반복문
 . 에러처리 : 오류메시지 정보 노출, 부적절한 예외 등
 . 코드 오류 : 널 포인터 역참조 등
 . 캡슐화 잘못했을때
 . API 오용

ㅁ 전송데이터
 - json : 이름과 값의 쌍
 - XML : 구조화된 문서 표현 (구조화된 문서 : html, sgml)
 - yaml : 데이터 직렬화 언어
 - cvs : 콤마로 구분

ㅁ SOAP : HTTP, HTTPS, SMTP 등을 한 메시지 교환
 - SOAP 구성
 . SOAP : 메시지를 교환하는 프로토콜
 . UDDI(설명서 목록) : 비즈니스 업체 목록 등록
 . WSDL(설명서) : 서비스의 기술적 세부사항 기술
 - 보안 프로토콜
 . SAML : 인증/권한관리
 . XKMS : 키관리
 . XACML : 접근제어

*
ㅁ 객체지향 분석 방법론
 - 럼바우 방법
 . 객체 모델링 : 객체 다이어그램
 . 동적 모델링 : 상태 다이어그램
 . 기능 모델링 : DFD(데이터 흐름도)
 - 부치 방법 : 미시적 및 거시적 개발 프로세스
 - Jacobson 방법 : Use Case를 중심으로 한 분석 방법
 - Coad와 Yourdon 방법 : E-R다이어그램을 사용
 - Wirfs-Brock 방법 : 분석과 설계의 구분 없음

*
ㅁ 객체지향 설계 원칙 SOLID
 - 단일 책임 원칙 SRP 하나의 클래스는 하나의 목적을 위해서 생성된다.
 - 개방 폐쇄 원칙 OCP 소프트웨어의 구성요소 ( 컴포넌트,클래스,모듈,함수)는 확장에는 열려 있고, 변경에는 닫혀있어야 한다.
 - 리스코프 치환 원칙 LSP 상속받은 하위클래스는 어디서나 자신의 기반타입(상위클래스)로 교체할 수 있어야 한다.
 - 인터페이스 분리 원칙 ISP 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다.
 - 의존성 역전 원칙 DIP 실제 사용관계는 바뀌지 않는다. 추상을 매개로 메세지를 주고받음으로서 관계를 느슨하게 만들어야한다.

*
ㅁ 결합도 ▼(모듈간)
 - 데이터(자료) 결합도 : 값전달
 - 스탬프 결합도 : 배열등전달
 - 제어 결합도 : 제어요소전달
 - 외부결합도 : 다른 모듈 변수 사용
 - 공통결합도 : 전역변수 사용
 - 내용결합도 : 다른 모듈 기능 이용

*
ㅁ 응집도▲(모듈내)
 - 우연적 응집도 : 연관관계 없음
 - 논리적 응집도 : 유사한 성격
 - 시간적 응집도 : 같은 시간 기능 수행
 - 절차적 응집도 : 순차적 수행
 - 통신적 응집도 : 동일한 입력과 출력을 사용해 다른 기능을 수행하는 활동들이 모임 
 - 순차적 응집도 : 출력값을 입력값으로 사용
 - 기능적 응집도 : 단일한 목적 수행

*
ㅁ 테스트 기법
 - 화이트 박스 테스트 : 문장검증, 분기검증, 경로검증, 조건 검증
 - 블랙박스 테스트
 . 동등분할기법 : 테스트 Case를 줄이는 목적, 입력 데이터의 영역을 유사한 도메인별로 유효값/무효값을 그룹핑하여 대푯값 테스트 케이스를 도출하여 테스트하는 기법 
 . 경계값분석 : 등가 분할 후 경곗값 부분에서 오류 발생 확률이 높기 때문에 경곗값을 포함하여 테스트 케이스를 설계하여 테스트하는 기법, 최소값 바로 위 최대치 바로 아래 등 입력값의 극한 한계를 테스트하는 기법
 . 원인-결과 그래프 검사 : 원인-결과 그래프 테스트는 그래프를 활용하여 입력 데이터 감의 관계 및 출력에 미치는 영향을 분석하여 효용성이 높은 테스트 케이스를 선정하여 테스트하는 기법
 . 오류예측검사 : 개발자가 범할 수 있는 실수를 추정하고 이에 따른 결함이 검출되도록 테스트 케이스를 설계하여 테스트하는 기법, 특정 테스트 대상이 주어지면 테스터의 경험과 직관을 바탕으로 개발자가 범할 수 있는 실수들을 나열하고 해당실수에 따른 결함을 노출하는 테스트로 다른 블랙박스 테스트 기법을 보완할 때 사용하는 기법
 . 비교검사 : 여러대의 컴퓨터에서 test하고 결과 비교, 비교 테스트는 여러 버전의 프로그램에 같은 입력값을 넣어서 동일한 결과 데이터가 나오는지 비교해보는 테스트 기법
 . 상태전이 검사 : 테스트 대상+시스템이나 객체의 상태를 구분하고 이벤트에 의해 어느 한 상태에서 다른 상태로 전이되는 경우의 수를 수행하는 테스트 기법
 . 결정 테이블 테스트 : 요구사항의 논리와 발생 조건을 테이블 형태로 나열하여 조건과 행위를 모두 조합하여 테스트하는 기법
 . 유스케이스 테스트 : 시스템이 실제 사용되는 유스케이스로 모델링 되어 있을때 프로세스 흐름을 기반으로 테스트 케이스를 명세화하여 수행하는 테스트 기법
 . 분류 트리 테스트 : SW의 일부 또는 전체를 트리 구조로 분석 및 표현하여 테스트 케이스를 설계하여 테스트하는 기법
 . 페어와이즈 테스트 : 테스트 데이터값들 간에 최소한 한번씩을 조합하는 방식이며 이는 커버해야할 기능적 범위를 모든 조합에 비해 상대적으로 작은 야으이 테스트 세트를 구성하기 위해 테스트한 기법

*
ㅁ 정규화
 - 비정규 릴레이션 > 도메인이 원자값 > 1NF > 부분적 함수 종속 제거 >2NF > 이행적 함수 종속 제거 > 3NF
   > 결정자이면서 후보키가 아닌것 제거 > BCNF > 다치 종속 제거 > 4NF > 조인 종속성 이용 > 5NF

*
ㅁ 관계 데이터 릴레이션 구조
 - 릴레이션 
 . 릴레이션 스키마 : 릴리이션의 논리적 구조
 . 릴레이션 인스턴스 : 스키마에 실제로 저장된 데이터 집합
 - 속성 : 릴레이션의 열, 개체의 특성
 - 튜플 : 릴레이션의 행, 속성들의 모임
 - 도메인 : 속성이 가질 수 있는 값의 범위
 - 차수 : 속성의 총 개수
 - 카디널리티 : 튜플의 총 개수 

*
ㅁ 프로세스 스케줄링 : 메모리에 올라온 프로세스들 중 어느 프로세스를 먼저 처리할지 순서를 정하는것
 - 선점형 스케줄링 
 . 운영체제가 실행중인 프로세스로부터 CPU를 강제로 빼앗을 수 있는 방법
 . Round Robin, SRT, 다단계 큐(MLQ), 다단계 피드백 큐(MLFQ)
 - 비선점형 스케줄링
 . 프로세스가 CPU를 점유하고 있다면 이를 빼앗을 수 없는 방식 
 . FCFS, SJF, HRN, 우선순위, 기한부 등

*
ㅁ OSI 7계층
1. #물리계층 (Physical Layer): 네트워크의 물리적인 연결과 전기 신호를 다룹니다. 
2. #데이터 링크 계층 (Data Link Layer): 프레임(Frame) 단위의 데이터 전송을 관리하고 오류 검출 및 수정을 수행합니다. / Header + 패킷 = frame
3. #네트워크 계층 (Network Layer): 데이터의 경로 설정과 전송을 담당하며, IP 주소를 사용하여 데이터를 목적지로 라우팅합니다. / Header + 세그먼트 = 패킷
4. #전송계층 (Transport Layer): 데이터의 신뢰성 있는 전송을 보장하고 흐름 제어와 오류 복구를 수행합니다. TCP와 #UDP프로토콜이 여기에 속합니다. / Header + Data = 세그먼트
5. #세션계층 (Session Layer): 통신 세션을 설정, 유지 및 해제하고 동기화를 제어합니다. / Data
6. #표현계층 (Presentation Layer): 데이터의 형식을 변환하고 암호화 및 압축을 수행하여 상위 계층에서 처리할 수 있도록 합니다.  / Data
7. #응용계층 (Application Layer): 최종 사용자가 네트워크 서비스에 접근할 수 있도록 인터페이스를 제공하며, 프로토콜을 통해 데이터 전송을 처리합니다. 예를 들어# HTTP, #FTP, #SMTP 등의 프로토콜이 여기에 속합니다. / Data


* 
 ㅁ 블록암호 알고리즘
 - DES : 64비트 블록, 56비트키, 16라운드, Feistel 구조
 - 3-DES : 2개의 키, 암호화, 복호화, 암호화, Feistel 구조
 - AES : 128비트 블록, 128/192/256비트키, 10/12/14 라운드, SPN 구조
 - SKIPJACK : 64비트 블록, 80비트키, 32라운드, Feistel변형
 - IDEA : 64비트 블록, 128비트키, 8라운드, Feistel + SPN 구조(스위스)
 - SEED : 128비트블록, 128비트 키, 16라운드, Feistel 구조(한국)
 - ARIA : 128비트블록, 128/192/256비트키, 12/14/16라운드, SPN 구조(한국)
 - LEA : 128비트블록, 128/192/256 비트키, 24/28/32라운드, SPN 구조(한국, 경량)

*
ㅁ Dos 공격
 - Smurf Attack : IP와 ICMP특성
 - Ping Of Death : 정상크기를 초과하는 ICMP 패킷
 - Land Attack : 출발지 IP와 목적지 IP가 동일한 패킷
 - Teardrop Attack : Fragment Number 를 위조
 - SYN Flooding : SYN 신호만 전송
 - UDP Flooding : 다량의 UDP 패킷을 전송
 - Ping Flooding : 많은 ICMP Echo 요청

















































