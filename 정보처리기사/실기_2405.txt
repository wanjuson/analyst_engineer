실기_2405

계획 > 분석 > 설계 > 구현 > 테스트 > 유지보수

ㅁ 소프트웨어 개발 방법론
 - 나선형모델 : 계획 > 위험분석  > 개발 > 평가

ㅁ 애자일 방법론

ㅁ PMBOK
 - 프로젝트 관리 프로세스 및 지식체계
 - 착수, 계획, 실행, 통제, 종료

ㅁ 비용식 산정
 - 하향식 : 전문가 판단 기법, 델파이 기법

ㅁ UML Unified Modeling Language
 - 시스템의 구조와 동작을 명세하는 표준화된 모델링 언어
 - UML 특징
  . 가시화 언어, 명세화 언어, 구축 언어, 문서화 언어 

ㅁ 프레임워크 : 개발에 필요한 구성요소와 아키텍처를 제공하는 반제품 형태의 소프퉤어
 - 특징 : 모듈화, 재사용성, 확장성, 제어의 역흐름
 - 전자정부 프레임 워크, 스트럿츠, 스프힝
 - 아이바티스, 마이바티스, 하이버네이트

ㅁ 라이브러리 : 프로그램에서 자주 사용되는 루틴이나 리소스(클래스, 템플릿, 함수 등)을 모아 놓은것
 - 내부 라이브러리, 외부 라이브러리

 ㅁ API : 다른 소프트웨어 도는 서비스와 상호 작용하는데 사용되는 인터페이스

ㅁ MVC 모델 계층
 - 프레젠테이션 계층 : 사용자 인터페이스
 - 제어 : 요청을 분석하고 적절한 비즈니스 로직 호출
 - 비즈니스 로직 :  핵심 업무 로직을 처리
 - 퍼시스턴스 : 데이터 관리
 - 도메인 모델 : 데이터를 전달

ㅁ 시큐어 코딩
 - OWASP : 오픈소스 웹 애플리케이션 보안 프로젝트
 - 시큐어 코딩 가이드
 . 입력 데이터 검증 및 표현 : SQL Injection, XSS, 자원삽입 등
 . 보안기능 : 부적절한 인가, 취약한 암호화 알고리즘, 패스워드 평문저장 등
 . 시간 및 상태 : 경쟁조건, 종료되지 않은 반복문
 . 에러처리 : 오류메시지 정보 노출, 부적절한 예외 등
 . 코드 오류 : 널 포인터 역참조 등
 . 캡슐화 잘못했을 때
 . API 오용

ㅁ 인터페이스 : 서로 다른 시스템간에 정보를 주고 받는 시스템
 - 구성 : 송신, 수신, 중계
 - 데이터 식별 : 전문 공통부, 전문 개별부, 전문 종료부

ㅁ EAI : 기업 내의 애플리케이션을 통합하는 솔루션
 - POINT-TO-POINT, HUB&SPOKE, MESSAGE BUS, HYBIRD

ㅁ 전송데이터
 - JSON : 이름과 값의 쌍
 - XML : 구조화된 문서 표현 (구조화된 문서 : HTML, SGML)
 - YAML : 데이터 직렬화 언어
 - CSV : 콤마로 구분

ㅁ AJAX : 비동기 방식으로 데이터를 교환, 페이지의 일부만 변경 가능

ㅁ SOAP : HTTP, HTTPS, SMTP 등을 한 메시지로 교환
 - SOAP 구성
 . SOAP : 메시지를 교환하는 프로토콜 / 프로토콜
 . UDDI : 비지니스 업체 목록 등록 / 도서관
 . WSDL : 서비스의 기술적 세부사항 기술 / 설명서
 - 보안 프로토콜
  . SAML : 인증/권한관리
  . XKMS : 키관리
  . XACML : 접근제어

ㅁ REST : HTTP URL를 통한 자원 명시와 HTTP Method를 통한 CRUD Operation 적용
 - REST 구성
 . 자원 : URI를 통해 식별
 . 행위 : GET, POST(등록), PUT(수정), DELETE
 . 표현 : 데이터 표현
 - RESTful : REST의 원리를 따르는 시스템

ㅁ 인터페이스 보안
 - 패킷공격기법 : 스니핑, 스푸핑
 스푸핑 : 임의로 구성된 웹사이트를 통해서 이용자의 정보를 해킹 하는 수법.

ㅁ 객체지향 특징
 - 정보은닉 : 내부 데이터에 직접 접근할 수 없도록 제한
 - 캡슐화 : 속성과 메서드를 하나로 묶은것
 - 상속 : 상위클래스의 속성과 메서드를 하위 클래스가 물려받은것
 - 다형성 : 하나의 메시지에 대해 여러가지 방법으로 응답
 - 추상화 : 실체의 핵심적인 개념만을 추출

ㅁ 객체지향 특징
 - 정보은닉 : 내부 데이터에 직접 접근할 수 없도록 제한
 - 캡슐화 : 속성과 메서드를 하나로 묶은것
 - 상속 : 상위클래스의 속성과 메서드를 하위 클래스가 물려받은것
 - 다형성 : 하나의 메시지에 대해 여러가지 방법으로 응답
 - 추상화 : 실체의 핵심적인 개념만을 추출

ㅁ 디자인 패턴 : 재사용할 수 잇도록 만들어놓은 패턴들의 모음
 - 디자인 패턴 구조 : 패턴의 이름과 유형, 문제및 배경, 솔루션, 사례, 결과, 샘플코드
 - GoF 디자인 패턴
  . 생성패턴 : 객체 생성과 관련된패턴
  . 구조패턴 : 객체를 조합해서 더큰 주고를 만드는 패턴
  . 행위패턴 : 알고리즘이나 책임분배에 해당하는 패턴

ㅁ 테스트의 필요성
 - 오류 발견 관점
 - 오류 예방 관점
 - 품질 향상 관점

ㅁ 테스트 오라클 : 테스트의 결과가 참인지 거짓인지 판단하기 위해서 미리 정의된 참값을 입력하여 비교하는 기법 및 활동
 

ㅇ 서브넷 마스크 : 203.76.25.1/26 가 의미하는 서브넷 마스크 값을 쓰시오.
서브넷 값
A 255.0.0.0
B 255.255.0.0
C 255.255.255.0
-> /26 이면 앞에서부터 1을 26개 기입하고 나머지는 0기입


ㅇ IPv4의 C클래스 네크워크를 26개의 서브넷으로 나누고 각 서브넷에는 4~5개의 호스트를 연결하려고 한다. 이러한 서브넷을 구성하기 위한 서브넷 마스크 값을 쓰시오.
C클래스 서브넷 : 255.255.255.0
마지막은 26보다는 32(2에 5승)이므로 앞에 1 5개, 2 3개로 248
정답 :  255.255.255.248