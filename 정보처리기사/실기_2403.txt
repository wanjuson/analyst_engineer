ch1. 소프트웨어 개발 방법론
1.1 요구사항 확인
ㅁ 소프트웨어 생명주기(SDLC)
 - 시스템의 요구분석부터 유지보수까지 전 공정을 체계화한 절차이다.
ㅁ 방법론
 - 구조적 방법론 : 전체시스템을 기느엥 따라 나누어 개발하고, 이를 통합하는 분할과 정복 접근 방식의 방법론
 - 정보공학 방법론 : 정보시스템 개발에 필요한 관리 절차와 작업 기법을 체계화한 방법론
 - 객체지향 방법론 : '객체'라는 기본 단위로 시스템을 분석 및 설계하는 방법론
   . 복잡한 현실세계를 사람이 이해하는 방식으로 시스템에 적용하는 방법론
 - 컴포넌트 기반 방법론 : 소프트웨어를 구성하는 컴포넌트를 조립해서 하나의 새로운 응용 프로그램을 작성하는 방법론
 - 애자일 방법론 : 절차보다 사람이 중심이 되어 변화에 유연하고 신속하게 적응하면서 효율적으로 시스템을 개발할 수 있는 신속 적응적 경량 개발 방법론
  . 개발 과정의 어려움을 극복하기 위해 적극적으로 모색한 방법론
 - 제품계열 방법론 : 특정 제품에 적용하고 싶은 공통된 기능을 정의하여 개발하는 방법론
  . 임베디드 소프트웨어를 작성하는데 유용한 방법론
ㅁ TDD : 작성해야 하는 프로그램에 대한 테스트를 먼저 수행하고 이 테스트를 통과할 수 있도록 실제 프로그램의 코드를 작성한다는 원리이다.
ㅁ 스크럼 : 매일 정해진 시간, 장소에서 짧은 시간의 개발을 하는 팀을 위한 프로젝트 관리 중심 방법론
ㅁ 델파이 기법 : 전문가의 경험적 지식을 통한 문제 해결 및 미래예측을 위한 기법
ㅁ 기능점수(FP) : 요구 기능을 증가시키는 인자별로 가중치를 부여하고 요인별 가중치를 합산하여 총 기능의 점수를 계산하여 비용을 산정하는 방식
ㅁ PERT : 일의 순서를 계획적으로 정리하기 위한 수렴 기법으로 비관치, 중간치, 낙관치의 3점 추정방식을 통해 일정을 관리하는 기법임.

2.2 현행시스템 분석
ㅁ소프트 아키텍처 패턴 유형
 - 계층화 패턴 : 계층화 패턴은 시스템을 계층으로 구분하여 구성하는 패턴
  . 각 히위 모듈들은 특정한 수준의 추상화를 제공하고, 각 계층은 다음 상위 계층에 서비스를 제공
  . 계층화 패턴은 서로 마주 보는 구대의 계층 사이에서만 상호 작용이 이루어짐
 - 클라이언트 서버 패턴 : 클라이언트-서버 패턴은 하나의 서버와 다수의 클라이언트로 구성된 패턴
  . 사용자가 클라이언트를 통해서 서버에 서비스를 요청하면 서버는 클라이언트에게 서비스를 제공
  . 서버는 계속 클라이언트로부터 요청을 대기
 - 파이트-필터 패턴 : 파이트-필터 패턴은 데이터 스트림을 생성하고 처리하는 시스템에서 사용 가능한 패턴
  . 파이프-필터 패턴은 서브 시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브 시스템으로 넘겨주는 과정을 반복
  . 필터 컴포넌트는 재사용성이 좋고, 추가가 쉽기 때문에 확장이 용이
 - 브로커 패턴 : 브로커 패턴은 분리된 컨포넌트들로 이루어진 분산 시스템에서 사용되고 이 컴포넌트들은 권격 서비스 실행을 통해 상호 작용이 가능한 패턴
  . 브로커 컴포넌트는 컴포넌트 간의 통신을 조정하는 역할 수행
  . 서버는 자신의 기능들(서비스 및 틍성을 브로커에 넘겨주며 클라이언트가 브로커에 서비스를 요청하면 브로커는 클라이언트를 자신의 레지스트리에 있는 적합한 서비스로 리다이렉션함)
 - 모델-뷰-컨트롤터 패턴 : MVC 패턴이라고도 하는 이 패턴은 대화형 애플리케이션을 모델, 뷰, 컨트롤러 3개의 서브 시스템으로 구조화하는 패턴
  . 모델 : 핵심 기능과 데이터 보관
  . 뷰 : 사용자에게 정보표시(하나 이상의 뷰가 정의될 수 있음)
  . 컨트롤러 : 사용자로부터 요청을 입력받아 처리
  . MVC 패턴은 각 부분이 별도의 컴포넌트로 분리되어 있어서 서로 영향을 받지 않고 개발 작업 수행 가능
  . MVC 패턴은 컴포넌트를 분리하며 코드의 효율적인 재사용을 가능하게 하고, 여러개의 뷰가 있어야 하는 대화형 애플리케이션 구축에 적합

후보키
릴레이션의 이것은 유일성과 최소성을 모두 만족해야한다. 하나의 릴레이션에 속하는 모든 튜플틀은 중복된 값을 가질수 없으므로 모든 릴레이션은 반드시 하나 이상의 이것을 갖는다. 릴레이션에서 튜플을 유일하게 구별해주는 속성 또는 속성들의 조합을 의미한다.

Method
객체지향기업에서 객체가 메시지를 받아 실행해야할 구체적인 연산

Method
객체지향기업에서 객체가 메시지를 받아 실행해야할 구체적인 연산
