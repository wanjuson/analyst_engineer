ch1. 소프트웨어 개발 방법론
1.1 요구사항 확인
ㅁ 소프트웨어 생명주기(SDLC)
 - 시스템의 요구분석부터 유지보수까지 전 공정을 체계화한 절차이다.
ㅁ 방법론
 - 구조적 방법론 : 전체시스템을 기느엥 따라 나누어 개발하고, 이를 통합하는 분할과 정복 접근 방식의 방법론
 - 정보공학 방법론 : 정보시스템 개발에 필요한 관리 절차와 작업 기법을 체계화한 방법론
 - 객체지향 방법론 : '객체'라는 기본 단위로 시스템을 분석 및 설계하는 방법론
   . 복잡한 현실세계를 사람이 이해하는 방식으로 시스템에 적용하는 방법론
 - 컴포넌트 기반 방법론 : 소프트웨어를 구성하는 컴포넌트를 조립해서 하나의 새로운 응용 프로그램을 작성하는 방법론
 - 애자일 방법론 : 절차보다 사람이 중심이 되어 변화에 유연하고 신속하게 적응하면서 효율적으로 시스템을 개발할 수 있는 신속 적응적 경량 개발 방법론
  . 개발 과정의 어려움을 극복하기 위해 적극적으로 모색한 방법론
 - 제품계열 방법론 : 특정 제품에 적용하고 싶은 공통된 기능을 정의하여 개발하는 방법론
  . 임베디드 소프트웨어를 작성하는데 유용한 방법론
ㅁ TDD : 작성해야 하는 프로그램에 대한 테스트를 먼저 수행하고 이 테스트를 통과할 수 있도록 실제 프로그램의 코드를 작성한다는 원리이다.
ㅁ 스크럼 : 매일 정해진 시간, 장소에서 짧은 시간의 개발을 하는 팀을 위한 프로젝트 관리 중심 방법론
ㅁ 델파이 기법 : 전문가의 경험적 지식을 통한 문제 해결 및 미래예측을 위한 기법
ㅁ 기능점수(FP) : 요구 기능을 증가시키는 인자별로 가중치를 부여하고 요인별 가중치를 합산하여 총 기능의 점수를 계산하여 비용을 산정하는 방식
ㅁ PERT : 일의 순서를 계획적으로 정리하기 위한 수렴 기법으로 비관치, 중간치, 낙관치의 3점 추정방식을 통해 일정을 관리하는 기법임.

1.2 현행시스템 분석
ㅁ소프트 아키텍처 패턴 유형
 - 계층화 패턴 : 계층화 패턴은 시스템을 계층으로 구분하여 구성하는 패턴
  . 각 히위 모듈들은 특정한 수준의 추상화를 제공하고, 각 계층은 다음 상위 계층에 서비스를 제공
  . 계층화 패턴은 서로 마주 보는 구대의 계층 사이에서만 상호 작용이 이루어짐
 - 클라이언트 서버 패턴 : 클라이언트-서버 패턴은 하나의 서버와 다수의 클라이언트로 구성된 패턴
  . 사용자가 클라이언트를 통해서 서버에 서비스를 요청하면 서버는 클라이언트에게 서비스를 제공
  . 서버는 계속 클라이언트로부터 요청을 대기
 - 파이트-필터 패턴 : 파이트-필터 패턴은 데이터 스트림을 생성하고 처리하는 시스템에서 사용 가능한 패턴
  . 파이프-필터 패턴은 서브 시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브 시스템으로 넘겨주는 과정을 반복
  . 필터 컴포넌트는 재사용성이 좋고, 추가가 쉽기 때문에 확장이 용이
 - 브로커 패턴 : 브로커 패턴은 분리된 컨포넌트들로 이루어진 분산 시스템에서 사용되고 이 컴포넌트들은 권격 서비스 실행을 통해 상호 작용이 가능한 패턴
  . 브로커 컴포넌트는 컴포넌트 간의 통신을 조정하는 역할 수행
  . 서버는 자신의 기능들(서비스 및 틍성을 브로커에 넘겨주며 클라이언트가 브로커에 서비스를 요청하면 브로커는 클라이언트를 자신의 레지스트리에 있는 적합한 서비스로 리다이렉션함)
 - 모델-뷰-컨트롤터 패턴 : MVC 패턴이라고도 하는 이 패턴은 대화형 애플리케이션을 모델, 뷰, 컨트롤러 3개의 서브 시스템으로 구조화하는 패턴
  . 모델 : 핵심 기능과 데이터 보관
  . 뷰 : 사용자에게 정보표시(하나 이상의 뷰가 정의될 수 있음)
  . 컨트롤러 : 사용자로부터 요청을 입력받아 처리
  . MVC 패턴은 각 부분이 별도의 컴포넌트로 분리되어 있어서 서로 영향을 받지 않고 개발 작업 수행 가능
  . MVC 패턴은 컴포넌트를 분리하며 코드의 효율적인 재사용을 가능하게 하고, 여러개의 뷰가 있어야 하는 대화형 애플리케이션 구축에 적합

후보키
릴레이션의 이것은 유일성과 최소성을 모두 만족해야한다. 하나의 릴레이션에 속하는 모든 튜플틀은 중복된 값을 가질수 없으므로 모든 릴레이션은 반드시 하나 이상의 이것을 갖는다. 릴레이션에서 튜플을 유일하게 구별해주는 속성 또는 속성들의 조합을 의미한다.

Method
객체지향기업에서 객체가 메시지를 받아 실행해야할 구체적인 연산

1.3 요구사항 확인
ㅁ 요구사항 확인 및 검증 단계의 주요 기법
 - 요구사항 검토, 겅형 기술 검토 활용, 프로토타이핑 활용, 모델 검증, 테스트 케이스 및 테스트를 통한 확인, Case 도구 활용 검증, 베이스라인을 통한 검증, 요구사항 추적표를 통한 검증

ㅁ 상세 정형 기술 컴토 기법
 - 관리 리뷰, 기술 리뷰, 인스펙션(피어리뷰), 워크스루, 감사

ㅁ 요구사항 관리 단계
 - 요구사항 관리 : 프로젝트 진행 과정에서 발생하는 요구사항의 변경에 대해 일치성과 무결성을 제공하기 위해 변경제어와 추적 등 일련의 관리를 수행하는 활동
 - 주요산출물 : 요구사항 협상, 요구사항 기준선 설정, 요구사항 변경관리, 요구사항 확인 및 검증

ㅁ 요구사항의 시스템화 타당성 분석
- 상호 운영성 : 다른 목적을 지닌 2개 이상 시스템들이 상호간 정보 및 서비스를 교환하면서 효과적으로 운용될 수 있는 시스템의 능력.

ch2.2 UI설계
ㅁ 커뮤니케이션 다이어그램 : 시퀀스 다이어그램과 같이 동작에 참여하는 객체들이 주고받는 메시지를 표현하고 메시지뿐만 아니라 객체 간의 연관까지 표현하는 다이어그램이다.
ㅁ 컴포넌트 다이어그램 : 시스템을 구성하는 물리적인 컴포넌트와 그들 사이의 의존 관계를 나타내는 다이어그램

ㅁ UI설계도구 :UX핀, 액슈어, 네이버 프로토나우 > 프로토타입

ㅁ UML : 모델링 작업을 하기 위한 언어로 사전 정의된 다양한 도형과 화살표를 활용하여 모델링 프로세스를 도식화함.
객체지향 소프트웨어 개발 과정에서 산출물을 명세화, 시각화, 문서화할때 사용되는 모델링 기술과 방법론을 통합해서 만든 표준화된 범용 모델링 언어

ㅁ UML 구성요소
 - 사물 : 추상적인 개념으로 주제를 나타내는 요소, 단어 관점에서 '명사' 또는 '동사'를 의미
 - 관계 : 사물의 의미를 확장하고 명확히 하는 요소, 사물과 사물을 연결하는 요소, 단어 관점에서 '형용사' 또는 '부사'를 의미
 - 다이어그램 : 사물과 관계를 모아 그림으로 표현한 형태, 형식과 목적에 따라 다양하게 정의

ㅁ UML 유형
1.클래스 다이어그램 : 객체 지향 모델링 시 클래스의 속성 및 연산과 클래스 간 정적인 관계를 표현한 다이어 그램이다.
2.유스케이스 다이어그램 : 시스템이 제공하고 있는 기능 및 그와 관련된 외부 요소를 사용자의 관점에서 표현하는 다이어그램
3.시퀀스 다이어그램 : 객체간 상호 작용을 메시지 흐름으로 표현한 다이어그램
4.패키지 다이어그램 : 서로 다른 패키지들 사이의 의존 관계를 표현하기 위한 다이어그램
5.활동 다이어그램 : 시스템이 어떤 기능을 수행하는지를 개체의 처리 로직이나 조건에 따라 처리의 흐름을 순서대로 표한하는 다이어그램
6.상태 다이어그램 : 하나의 객체가 자신이 속한 클래스의 상태 변화 혹은 다른 객체와의 상호 작용에 따라 상태가 어떻게 변화하는지 표현하는 다이어그램
7.커뮤니케티션 다이어그램 : 시퀀스 다이어그램과 같이 동작에 참여하는 개체들이 주고받는 메시지를 표현하고, 메시지뿐만 아니라 객체간의 연관까지 표현하는 다이어그램.
8.컴포넌트 다이어그램 : 컴포넌트 다이어그램은 시스템을 구성하는 물리적인 컴포넌트와 그들 사이의 의존 관계를 나태내는 다이어그램.

ㅁ 클래스 다이어그램에서 클래스의 구조적 특성에 이름을 붙인 것으로 특성에 해당하는 인스턴스가 보유할 수 있는 값의 범위를 기술하는 구성요소 : 속성
 - 클래스 다이어그램의 구성요소 : 클래스, 속성, 연산, 접근제어자

--------------------------------------------------
3.데이터 입출력 구현
ㅁ 논리데이터 모델링 : 데이터베이스 설계 프로세스의 기초 설계 단계로 비즈니스 정보의 구조와 규칙을 명확하게 표현할 수 있는 기법
ㅁ 물리데이터 모델링 : 관계 데이터 모델링으로도 불리며 논리적 데이터 모델을 DBMS의 특성, 기능, 성능 등을 고려하여 데이터베이스의 물리적인 구조를 작성해나가는 기법
ㅁ 정규화 : 관계형 데이터 모델에서 데이터의 중복성을 제거하여 이상 현상을 방지하고 데이터의 일관성과 정확성을 유지하기 위해 무손실 분해하는 과정
ㅁ 데이터 마이닝 : 대규모로 저장된 데이터 안에서 체계적이고 자동적으로 통계적 규칙이나 패턴을 찾아내는 기술

3.1 논리데이터 저장소 확인









