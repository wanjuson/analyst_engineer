2장. 데이터 처리 기술
분산 파일 시스템
[구글 파일 시스템]
1. 가정
 - 저가형 서버로 구성된 환경으로 서버의 고장이 빈번하게 발생할 수 있다.
 - 대부분의 파일은 대용량이다.
 - 작업 부하는 주로 연속적으로 많은 데이터를 읽는 연산이거나 임의의 영역에서 적은 데이터를 읽는 연산이다.
 - 파일에 대한 연산은 주로 순차적으로 데이터를 추가하며 파일에 대한 갱신은 드물게 이루어진다.
 - 여러 클라이언트에서 동시에 동일한 파일에 데이터를 추가하는 환경에서 동기화 오버헤드를 최소화할 수 있는 방법이 요구된다.
 - 낮은 응답 지연시간보다 높은 처리율이 중요하다.

2. Master Node
 - 전체를 관리하고 통제항는 중앙 서버
 - 단일 마스터 구조 : 모든 메타데이터를 메모리상에서 관리
 - 주기적으로 하트비트 메시지를 이용하여 chunk 서버에 저장된 chunk들의 상태를 체크해 상태에 따라 chunk를 재복제하거나 재분산하는 것과 같은 회복 동작 수행
 
3. Chunk Server
 - 물리적인 서버. 실제 입출력을 처리
 - 고정된 크기의 chunk들로 나누어 chunk server에 분산/저장된다.
 - 클라이언트는 파일에 접근하기 위하여 마스터로부터 해당 파일의 chunk가 저장된 chunk 서버의 위치와 핸들을 받아온다.
 - 로컬 디스크에 chunk를 저장/관리하면서 클라이언트로부터의 chunk 입출력 요청을 처리한다.
 - chunk는 마스터에 의해 생성/삭제될 수 있으며 식별자에 의해 구별된다.
 
4. Client
 - 파일 입출력을 요청하는 클라이언트 어플리케이션
 - POSIX 지원 X. 파일 시스템 인터페이스와 유사한 자체 인터페이스를 지원한다.
 
[하둡 파일 시스템]
 - 블록구조(Chunk Based) : 기본적으로 3개의 블록 복제본을 저장한다.
 - 마스터-슬레이브 아키텍처 : 하나의 네임노드와 다수의 데이터노드
 
1. 네임노드
 - 메타데이터 관리 : 네임노드는 클라이언트에게 빠르게 응답할 수 있도록 메도리에 전체 메타데이터를 로딩해서 관리한다.
 - 데이터노드 모니터링 : 데이터노드는 3초마다 네임노드에게 하드비트 메시지를 전송한다.
  (하드비트 : 데이터노드 상태 정보와 데이터노드에 저장돼 있는 블록의 목록으로 구성)
 - 블록관리 : 장애가 발생한 데이터노드를 발견하면 해당 데이터노드의 블록을 새로운 데이터노드로 복제한다.
 - 클라이언트 요청 접수
 
2. 데이터노드
 - 클라이언트가 HDFS에 저장하는 파일을 로컬 디스크에 유지한다,.
 - 클라이언트의 데이터 입출력 요청 처리
 - HDFS에서 파일을 한번 쓰이면 변경되지 않는다고 가정한다.
  따라서 HDFS는 데이터에 대한 스트리밍 접근을 요청하면 배치 작업에 적합한 응용을 대상으로 한다.
  
[러스터]
 - 클러스터 파일 시스템에서 개발한 객제 기반 클러스터 파일 시스템
 
1, 구성
 1) 클라이언트 파일 시스템
  - 리눅스, VFS에서 설치할 수 있는 파일 시스템
  
  
